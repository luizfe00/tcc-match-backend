// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Student {
  id String @id @default(uuid())
  name String
  email String @unique
  enrollment String @unique
  interestId String? @unique

  paperProposition PTCC?
  paper TCC?
  themes Theme[]

  Interest Interest? @relation(fields: [interestId], references: [id])
}

model Professor {
  id String @id @default(uuid())
  name String
  email String @unique
  enrollment String @unique
  vacancies Int
  role Role @default(TEACHER)

  paperPropositions PTCC[]
  papers TCC[]
  themes Theme[]
  interests Interest[]
}

model Theme {
  id String @id @default(uuid())
  label String @unique
  summary String
  duration Int

  studentId String?
  professorId String?

  student Student? @relation(fields: [studentId], references: [id])
  professor Professor? @relation(fields: [professorId], references: [id])
  paperProposition TCC?
  paper PTCC?
  interests Interest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? 
}

model Interest {
  id String @id @default(uuid())
  text String

  studentId String? @unique
  themeId String
  professorId String?

  student Student?
  theme Theme @relation(fields: [themeId], references: [id])
  professor Professor? @relation(fields: [professorId], references: [id])

  createdAt DateTime @default(now())
}

model PTCC {
  id String @id @default(uuid())
  documentUrl String
  approved Boolean @default(false)

  studentId String @unique
  themeId String @unique
  professorId String
  
  theme Theme @relation(fields: [themeId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])
  stages Stage[]

  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? 
}

model TCC {
  id String @id @default(uuid())
  documentUrl String
  approved Boolean

  studentId String @unique
  themeId String @unique
  professorId String

  theme Theme @relation(fields: [themeId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  professor Professor @relation(fields: [professorId], references: [id])
  stages Stage[]

  startDate DateTime
  endDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? 
}

model Stage {
  id String @id @default(uuid())
  label String

  paperPropositionId String 
  paperId String?
  
  paperProposition PTCC @relation(fields: [paperPropositionId], references: [id])
  paper TCC? @relation(fields: [paperId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  TEACHER
  COORDINATOR
}